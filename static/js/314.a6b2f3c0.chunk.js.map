{"version":3,"file":"static/js/314.a6b2f3c0.chunk.js","mappings":"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","sources":["components/MovieDetails.jsx","pages/MovieDetailsPage.jsx","services/fetcherAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { BsXOctagonFill } from 'react-icons/bs';\n\nconst StyledNavLink = styled(NavLink)`\n  font-weight: 500;\n  color: #ffffff;\n\n  &.active {\n    color: #000000;\n  }\n`;\n\nconst StyledAdditionalDiv = styled.div`\n  border: 3px solid;\n  border-color: #b5bdf0;\n  border-radius: 3px;\n  background-color: #b5bdf0;\n  margin-top: 30px;\n  padding: 20px;\n`;\n\nconst StyledLi = styled.li`\n  color: #ffffff;\n  list-style: none;\n  margin-bottom: 10px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst StyledDiv = styled.div`\n  display: flex;\n`;\n\nconst ContentDiv = styled.div`\n  margin-left: 30px;\n`;\n\nconst StyledP = styled.p`\n  font-weight: 500;\n`;\n\nconst StyledPAdd = styled(StyledP)`\n  color: #ffffff;\n  margin-top: 0;\n  margin-bottom: 10px;\n`;\n\nconst StyledUl = styled.ul`\n  margin: 0;\n`;\n\nconst MovieDetails = ({ item, location, slug }) => {\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    videos,\n  } = item;\n\n  const videoId = videos?.results?.find(v => v.type === 'Trailer')?.key;\n\n  return (\n    <>\n      <StyledDiv>\n        {!poster_path && <BsXOctagonFill size=\"275\" fill=\"#b5bdf0\" />}\n        {poster_path && (\n          <img\n            src={`${BASE_URL}${poster_path}`}\n            alt={original_title}\n            width=\"500\"\n          />\n        )}\n        <ContentDiv>\n          <h1>{`${original_title} (${Number.parseInt(release_date)})`}</h1>\n          <StyledP>User Score: {vote_average}</StyledP>\n          <h2>Overview</h2>\n          <StyledP>{overview}</StyledP>\n          <h3>Genres</h3>\n          <StyledP>\n            {genres.length === 0 && 'N/A'}\n            {genres.map(genre => (\n              <span key={genre.id}>{`${genre.name} `}</span>\n            ))}\n          </StyledP>\n          {videoId && (\n            <>\n              <h4>Trailer</h4>\n              <iframe\n                width=\"560\"\n                height=\"315\"\n                title=\"movieTrailer\"\n                src={`https://www.youtube.com/embed/${videoId}`}\n                frameBorder=\"0\"\n                allowFullScreen\n              ></iframe>\n            </>\n          )}\n        </ContentDiv>\n      </StyledDiv>\n      <StyledAdditionalDiv>\n        <StyledPAdd>Additional information</StyledPAdd>\n        <StyledUl>\n          <StyledLi>\n            <StyledNavLink\n              to={`/movies/${slug}/cast`}\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              Cast\n            </StyledNavLink>\n          </StyledLi>\n          <StyledLi>\n            <StyledNavLink\n              to={`/movies/${slug}/reviews`}\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              Reviews\n            </StyledNavLink>\n          </StyledLi>\n        </StyledUl>\n      </StyledAdditionalDiv>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  item: PropTypes.shape({\n    poster_path: PropTypes.string,\n    original_title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.object),\n    videos: PropTypes.object,\n  }),\n  location: PropTypes.object.isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nexport default MovieDetails;\n","import styled from 'styled-components';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieDetails } from '../services/fetcherAPI';\nimport MovieDetails from '../components/MovieDetails';\nimport { useParams, Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport { BsFillCaretLeftFill } from 'react-icons/bs';\n\nconst Button = styled.button`\n  border: 2px solid #ffffff;\n  background-color: #b5bdf0;\n  border-radius: 3px;\n  height: 30px;\n  margin-bottom: 20px;\n  position: sticky;\n  top: 80px;\n  color: #ffffff;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #a8b4ff;\n  }\n`;\n\nconst MovieDetailsPage = ({ itemFetcher }) => {\n  const { slug } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n  const location = useLocation();\n  const movieId = slug.match(/[a-z0-9]+$/)[0];\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const item = await fetchMovieDetails(movieId);\n        setItem(item);\n      } catch (error) {\n        toast.error('Movie not found');\n        return;\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n\n  itemFetcher(item);\n\n  const onGoBack = () => {\n    navigate(`${location?.state?.from}`);\n  };\n\n  return (\n    <>\n      <Button type=\"button\" onClick={onGoBack}>\n        <BsFillCaretLeftFill size=\"10\" fill=\"#ffffff\" /> Go back\n      </Button>\n      {item && <MovieDetails item={item} location={location} slug={slug} />}\n      <Outlet />\n    </>\n  );\n};\n\nMovieDetailsPage.propTypes = { itemFetcher: PropTypes.func.isRequired };\n\nexport default MovieDetailsPage;\n","import Axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'a4bc470e2c9f83a606b7ff9bda48baef';\nlet page = 1;\n\nconst fetchPopularMovies = async () => {\n  const response = await Axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}&page=${page}`\n  );\n\n  return response;\n};\n\nconst fetchMovieDetails = async id => {\n  const response = await Axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY}&append_to_response=videos,credits,reviews`\n  );\n  const result = response.data;\n\n  return result;\n};\n\nconst fetchMoviesBySearchquery = async searchQuery => {\n  const response = await Axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  const result = response.data;\n  return result;\n};\n\nexport { fetchPopularMovies, fetchMovieDetails, fetchMoviesBySearchquery };\n"],"names":["StyledNavLink","styled","NavLink","StyledAdditionalDiv","StyledLi","StyledDiv","ContentDiv","StyledP","StyledPAdd","StyledUl","item","location","slug","poster_path","original_title","release_date","vote_average","overview","genres","videos","videoId","results","find","v","type","key","size","fill","src","alt","width","Number","parseInt","length","map","genre","name","id","height","title","frameBorder","allowFullScreen","to","state","from","Button","itemFetcher","useParams","navigate","useNavigate","useState","setItem","useLocation","movieId","match","useEffect","fetchMovie","fetchMovieDetails","toast","onClick","BASE_URL","KEY","fetchPopularMovies","Axios","response","result","data","fetchMoviesBySearchquery","searchQuery"],"sourceRoot":""}